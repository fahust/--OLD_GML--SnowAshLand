<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_npc6</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path = path_add();//suis le joueur

path_start(pathboss1,5,path_action_restart,true)//fais sa ronde

hpmobs = 100

enemyspeed = 7

if hpmobs &lt; 0 {
instance_destroy()
}

/// blood system

partblood_sys = part_system_create();

//blood particle
partblood = part_type_create();
part_type_shape(partblood,pt_shape_disk);
part_type_size(partblood,0.20,0.20,-0.01,0);
part_type_color1(partblood,250);
part_type_alpha2(partblood,1,1);
part_type_speed(partblood,1,2,0,0);
part_type_direction(partblood,0,259,0,0);
part_type_gravity(partblood,0.3,270);
part_type_blend(partblood,1);
part_type_life(partblood,15,30);

//create emitter
partblood_emit = part_emitter_create(partblood_sys);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>motion_set(choose(random(360), random(360),random(360), random(360),random(360), random(360),random(360), random(360),random(360), random(360),random(360), random(360),random(360), random(360),random(360) ,360 ), enemyspeed/1.5/ fpsmax )

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//path_start(pathboss1,5,path_action_continue,false)//fais sa ronde

image_angle=direction
    var mx = obj_zombie.x ;
var my = obj_zombie.y;
    if (mp_grid_path(global.grid, path, x, y, mx, my ,2)) {


if hpmobs &gt; 0 {
if obj_zombie.hp &gt; 0 {//test pour enemi rode apres mort du joueur
 patrol = 0
enemyspeed = 4.5

//if  (point_distance(x, y, player_x, player_y) &lt; 150) { } else {
    path_start(path, enemyspeed / fpsmax , path_action_stop, 0);
    }}}
    alarm[1] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tir de l'enemi rajouter les collisions des balles


player_x = obj_zombie.x;
player_y = obj_zombie.y;

if (point_distance(x, y, player_x, player_y) &lt; 550) &amp;&amp; alarm[0] &lt; 1 

{
///frequence de tir
alarm[0] = 80 * obj_zombie.fpsmax

if (!collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_wall,1,1)) 

&amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,oOtherClient,1,1)) //nvo pr net

 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_wall,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tankneige,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house1,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house2,1,1))
  &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house3,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_buisson1,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rocher1,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tronc,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_shape03,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_shape05,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_shape06,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_crate0,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_crate02,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_crate03,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicle,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house2,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade1,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade2,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade3,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade4,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade5,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade6,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade7,1,1))
  &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_avion,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house8,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house9,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house10,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house11,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house12,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house13,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house14,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_eglise,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tente,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tente2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tente3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tente4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_houseburn,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridge,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridge2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridge3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridge4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridge5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridgebroke,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_etageafoin,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_housebroke,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_ascensseur,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_comptoir,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_comptoir2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bibliotheque,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bibliotheque2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bibliotheque3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_cuisiniere,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_cuisiniere2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chaise,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chaise2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chaise3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chaisetomber,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_cercueil,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bureau,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tabletorture,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_torture,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_torture2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_statue,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tablepoisson,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tableforgeron,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vaisselle,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tablefruit,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_etagere,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_four,1,1)
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_four2,1,1)))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table8,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table9,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tablejeu,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table10,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table11,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_etagerevin,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_burreau,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_crucifier,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_crucifier2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tenteneige1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tenteneige2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_brouette,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_machineculture,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras8,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rock1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rock2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rock3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rock4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rock5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest01,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest02,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest03,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest04,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest05,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest06,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_wall2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_wall3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_wall4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debris1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debris2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_spike1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_spike2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_spike3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_train1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_train2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_train3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_train4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_train5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_avion2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_avion3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_avion4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_avion5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_turret1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_turret2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule8,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule9,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule10,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule11,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule12,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule13,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule14,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule15,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule16,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule17,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule18,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule19,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule20,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule21,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule23,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule24,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule25,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule26,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule27,1,1))
{alarm[4] = 75
///instance_create ( x+50,y+50,obj_bullet_enemy)

var ex, ey;
ex = instance_nearest(x, y, obj_zombie).x;
ey = instance_nearest(x, y, obj_zombie).y;
if obj_zombie.hp &gt; 0 {
aleatgrenade = random(15)
if aleatgrenade &lt; 10 {
with (instance_create(x, y, obj_grenadeenemy))

   {
      
        
        
         direction = point_direction(x, y, ex, ey);
         speed = 17 / obj_zombie.fpsmax
        
       
       
    
  
   }
   


}else{//randomgrenade
with (instance_create(x, y, obj_grenadeenemy))

   {
 
        
        
         direction = point_direction(x, y, ex, ey);
        speed = 17 / obj_zombie.fpsmax
  
   }
   with (instance_create(x, y, obj_grenadeenemy))

   {
 
        
        
         direction = point_direction(x, y, ex, ey)+30;
        speed = 17 / obj_zombie.fpsmax
  
   }
   with (instance_create(x, y, obj_grenadeenemy))

   {
 
        
        
         direction = point_direction(x, y, ex, ey)-30;
        speed = 17 / obj_zombie.fpsmax
  
   }
}





}
   }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ne pas oublier de rajouter collision avec nvo murs
 fpsmax = obj_zombie.fpsmax
 

 
  if x&gt;room_width x=room_width; if x&lt;0 x=0; if y&gt;room_height y=room_height; if y&lt;0 y=0;
  
        player_x = obj_zombie.x;
player_y = obj_zombie.y;
  
  
  
   if (point_distance(x, y, player_x, player_y) &lt; 500)  
 //nvo 

 
   
   

 
  {
   path_end();}else{


//var mx = (obj_zombie.x div 32)*32+16;//
//var my = (obj_zombie.y div 32)*32+16;//+16
var mx = obj_zombie.x ;
var my = obj_zombie.y;


if (mp_grid_path(global.grid, path, x, y, mx, my ,2)) {


if hpmobs &gt; 0 {
if obj_zombie.hp &gt; 0 {//test pour enemi rode apres mort du joueur
 patrol = 0
image_angle =  point_direction(x,y,obj_zombie.x,obj_zombie.y)
enemyspeed = 10
//if  (point_distance(x, y, player_x, player_y) &lt; 150) { } else {
    path_start(path, enemyspeed / fpsmax , path_action_stop, 0);
    alarm[1] = -1
    
    
    
    }
    }
    }
    }
    
    
   
  
    
    
    
    // tir par rapport a la distance

 if (point_distance(x, y, player_x, player_y) &lt; 650) &amp;&amp; alarm[0] &lt; 1  //&amp;&amp; tir = 0 
 
 {
    alarm[0] = 30
    tir = 1
    }
    
    if (point_distance(x, y, player_x, player_y) &gt; 650)  {
    tir = 0
    }else{
    
tir = 1
    }
  
  //rester a certaines distance
  


image_angle=point_direction(x, y, player_x, player_y)

move_bounce_solid(true)
if alarm[2] &lt; 0 {
alarm[2] = 30
}
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_laser">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tir de loin

tirdeloin = 1
alarm[6] = 1000
/*
if hpmobs &lt; 0 {


alarm[2] = 1000
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///degat de la balle - dura arme * max dmg ,min dmg

if hpmobs &gt; 0
{ hpmobs -= irandom_range(obj_zombie.mindmg * obj_zombie.minarme,obj_zombie.maxdmg * obj_zombie.maxarme) / 3 * (global.duraarme/2)

part_emitter_region(partblood_sys,partblood_emit,x,x,y,y,1,1);
part_emitter_burst(partblood_sys,partblood_emit,partblood,20);
}



// Amount of blood
var count = random_range(4, 32);

// Left-mouse click

   //  for (var i = 0; i &lt; count; i++) {
        // Spawn blood within an 8x8 square around the mouse cursor
        instance_create(x , y , oBlood);
  //   }
    
    // Screenshake
    //alarm[0] = 4;
    shake    = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bulletassaut">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tir de loin

tirdeloin = 1
alarm[6] = 1000
/*
if hpmobs &lt; 0 {


alarm[2] = 1000
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hpmobs &gt; 0
{ hpmobs -= irandom_range(obj_zombie.mindmg * obj_zombie.minarme,obj_zombie.maxdmg * obj_zombie.maxarme) / 5 * obj_zombie.weapon3dmg * (global.duraarme3/2)

part_emitter_region(partblood_sys,partblood_emit,x,x,y,y,1,1);
part_emitter_burst(partblood_sys,partblood_emit,partblood,20);
}



// Amount of blood
var count = random_range(4, 32);

// Left-mouse click

      //  for (var i = 0; i &lt; count; i++) {
        // Spawn blood within an 8x8 square around the mouse cursor
        instance_create(x , y , oBlood);
  //   }
    
    // Screenshake
   // alarm[0] = 4;
    shake    = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
