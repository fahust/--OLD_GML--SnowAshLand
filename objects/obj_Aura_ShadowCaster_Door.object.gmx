<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Aura_Block</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Aura_ShadowCaster_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this instance is an example of how to make an object change 
// static lights to dynamic while it moves and then go back to 
// static afterwards.

// First define the shadow mesh

Aura_Shadow_Caster_Box_Init();

// Call an alarm to check for a collision with the "player" (the torch in this demo).
alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This alarm closes the door.

alarm[1] = 1;
if image_xscale &gt; image_yscale
{
if x &lt; xstart
    {
    x += 5;
    // Update the light again as the door closes
    with (obj_Aura_Light_Parent)
        {
        if place_meeting(x, y, other)
            {
            aura_light_update = true;
            }
        }
    }
else
    {
    x = xstart;
    alarm[1] = -1;
    alarm[0] = 1;
    }
}
else
{
if y &lt; ystart
    {
    y += 5;
    // Update the light again as the door closes
    with (obj_Aura_Light_Parent)
        {
        if place_meeting(x, y, other)
            {
            aura_light_update = true;
            }
        }
    }
else
    {
    y = ystart;
    alarm[1] = -1;
    alarm[0] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This alarm detects the player (torch) and moves the instance if detected
// to create a door effect. Since the lights in the DEMO room are static, 
// we need to manually call the update variable so that they briefly become 
// dynamic and so change the shadows.

if collision_point(x + (sprite_width / 2), y + (sprite_height / 2), obj_Aura_Torch_Light, false, false)
{
alarm[0] = 1;
with (obj_Aura_Light_Parent)
    {
    // Check the instance is actually within the light source
    if place_meeting(x, y, other)
        {
        // It is so update!
        aura_light_update = true;
        }
    }
// Move the instance based on whther it is vertical or horizontal
if image_xscale &gt; image_yscale
    {
    if x &gt; xstart - sprite_width
        {
        x -= 5;
        }
    else
        {
        alarm[1] = 1;
        }
    }
else
    {
    if y &gt; ystart - sprite_height
        {
        y -= 5;
        }
    else
        {
        alarm[1] = 1;
        }
    }
}
else alarm[1] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
