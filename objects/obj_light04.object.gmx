<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ico_light</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//stay = 1
mode = 15;


ini_open("savefile.ini");//to open our file

    decrypted3  = ini_read_string ("player","lowgpu2","R");
    obj_zombie.lowgpu22 = XOR_CryptString( string(decrypted3), "bahamut");
    obj_zombie.lowgpu2 = real(obj_zombie.lowgpu22)
    
      ini_close();

///liste des objets projetant une ombre sur les lumières
draw = 0
//alarm[0] = 1;

// Variables utilisées dans Step
time = 0;
increment = 0.1;
l = 0;
d = 0;

SL_light_ini_begin(); // Commence l'initialisation de l'objet lumière
///*
sl_light_texture = spr_light01;  // Index de la texture de lumière
sl_light_xscale  = 2.66;         // Facteurs d'étirement de la lumière
sl_light_yscale  = 2.66;
sl_light_color   = c_red;        // Couleur de la lumière
sl_light_shadowsharpness = 0.22; // Facteur de dureté des ombres
if obj_zombie.lowgpu2 = 0 {
sl_light_refresh         = true;//grosse conso avec true
}else {
sl_light_refresh         = false;//grosse conso avec true
}
//*/
// Liste des objets projetant une ombre
// SL_light_cast_obj(obj,mask);
if obj_zombie.lowgpu2 = 0 {
SL_light_cast_obj( oOtherClient, -1 );
SL_light_cast_obj( oOtherIA, -1 );

SL_light_cast_obj( obj_crate0, -1 );
SL_light_cast_obj( obj_crate02, -1 );
SL_light_cast_obj( obj_crate03, -1 );
SL_light_cast_obj( obj_shape01, -1 );
SL_light_cast_obj( obj_shape03, -1 );
SL_light_cast_obj( obj_shape04, -1 );
SL_light_cast_obj( obj_shape05, -1 );
SL_light_cast_obj( obj_shape06, -1 );
SL_light_cast_obj( obj_ball,    -1 );
SL_light_cast_obj( obj_bush01,  -1 );
SL_light_cast_obj( obj_npc,     spr_character_smask );
SL_light_cast_obj( obj_zombie,  -1 );
SL_light_cast_obj( obj_wall,  -1 );
SL_light_cast_obj( obj_enemy2,  -1 );
SL_light_cast_obj( obj_enemyassaut,  -1 );
SL_light_cast_obj( obj_enemyshootgun,  -1 );
SL_light_cast_obj( obj_loup,  -1 );
SL_light_cast_obj( obj_loupstop,  -1 );
SL_light_cast_obj( obj_ours,  -1 );
SL_light_cast_obj( obj_oursstop,  -1 );
SL_light_cast_obj( obj_ours,  -1 );

SL_light_cast_obj( obj_reparateurdarme,  -1 );
SL_light_cast_obj( obj_forgerondarme,  -1 );
SL_light_cast_obj( obj_armurier,  -1 );

SL_light_cast_obj( obj_arbreneige,  -1 );
SL_light_cast_obj( obj_arbremort,  -1 );
SL_light_cast_obj( obj_house1,  -1 );
SL_light_cast_obj( obj_house2,  -1 );
SL_light_cast_obj( obj_house3,  -1 );
SL_light_cast_obj( obj_rocher1,  -1 );
SL_light_cast_obj( obj_tankneige,  -1 );
SL_light_cast_obj( obj_avion,  -1 );

SL_light_cast_obj( obj_tronc,  -1 );
SL_light_cast_obj( obj_buisson1,  -1 );
SL_light_cast_obj( obj_feuille1,  -1 );
SL_light_cast_obj( obj_feuille2,  -1 );
SL_light_cast_obj( obj_feuille3,  -1 );
SL_light_cast_obj( obj_barricade1,  -1 );
SL_light_cast_obj( obj_barricade2,  -1 );
SL_light_cast_obj( obj_barricade3,  -1 );
SL_light_cast_obj( obj_barricade4,  -1 );
SL_light_cast_obj( obj_barricade5,  -1 );
SL_light_cast_obj( obj_barricade6,  -1 );
SL_light_cast_obj( obj_barricade7,  -1 );
}

//SL_light_cast_obj( obj_vehicle, -1 );

SL_light_ini_end(); // Termine l'initialisation de l'objet lumière
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Libère la mémoire utilisée par les surfaces
SL_light_free();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
instance_destroy()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if obj_zombie.lowgpu = 1 {

}


// Actualise la position de la lumière
sl_light_x = x;
sl_light_y = y;

// Configurations des différentes lumières déterminées par la var 'mode' déclarée dans l'event creation code de l'éditeur de room //
switch mode
{
case 1: // Lumière blanche saccadée
{
sl_light_xscale          = 3;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = c_white;
sl_light_power           = random(5);
sl_light_shadowlength    = 5;
sl_light_shadowfactor    = 4.04;
sl_light_shadowsharpness = 0.3;

if point_distance(x,y,obj_zombie.x,obj_zombie.y) &gt;= 185 sl_light_refresh = false;
else sl_light_refresh = true;
} break;

case 2: // Lumière jaune
{
sl_light_xscale          = 2;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = c_yellow;
sl_light_power           = 0.7;
sl_light_shadowfactor    = 1.03;
sl_light_shadowsharpness = 0.2;

if fps!=0 path_speed=0.4*(60/fps);
} break;

case 3: // Lumière orange grésillante fixe
{
sl_light_xscale          = 2.3;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = c_orange;
sl_light_power           = 0.5 + random(0.2);
sl_light_shadowlength    = 3;
sl_light_shadowfactor    = 1.04;
sl_light_shadowsharpness = 0.2;
sl_light_refresh         = false;
} break;

case 4: // Lumière jaune clignotante
{
sl_light_xscale          = 1.33;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = c_yellow;
sl_light_ambientpower    = 0.25;
sl_light_shadowlength    = 3;
sl_light_shadowfactor    = 1.045;
sl_light_shadowsharpness = 0.4;

// Clignotement de la lumière
time += 0.03*60/max(fps,1) if time&gt;=pi*2 time=0;

sl_light_power  = 0.33 + (sin(time)+1) / 3;
sl_light_xscale = 0.8 + 0.7*sl_light_power;
sl_light_yscale = sl_light_xscale;
} break;

case 5: // Lumière rouge/orangé saccadée
{
sl_light_xscale          = 1.86;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = make_color_rgb(255,83,0);
sl_light_power           = 0.8 + random(0.7);
sl_light_shadowlength    = 3;
sl_light_shadowfactor    = 1.045;
sl_light_shadowsharpness = 0.1;
} break;

case 6: // Projecteur vert fixe
{
sl_light_texture         = spr_light02;
sl_light_xscale          = 4;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = make_color_rgb(149,219,79);
sl_light_power           = 0.8;
sl_light_ambientpower    = 0.25;
sl_light_shadowlength    = 2;
sl_light_shadowfactor    = 1.02;
sl_light_shadowsharpness = 0.28;
sl_light_refresh         = false;
} break;

case 7: // Lumière blanche
{
sl_light_xscale          = 5.26;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = c_white;
sl_light_power           = 0.7;//0.7
sl_light_ambientpower    = 0.5;//0.3
sl_light_shadowlength    = 2;//2
sl_light_shadowfactor    = 1.025;
sl_light_shadowsharpness = 0.9;//0.22
if obj_zombie.lowgpu2 = 0 {
sl_light_refresh         = true;//grosse conso avec true
}else {
sl_light_refresh         = false;//grosse conso avec true
}

//
//sl_light_xscale          = 3.55;
//sl_light_yscale          = sl_light_xscale;
//sl_light_color           = make_color_rgb(255,255,230);
//sl_light_power           = 0.9;
//sl_light_ambientpower    = 0.3;
//sl_light_shadowlength    = 2;
//sl_light_shadowfactor    = 1.025;
//sl_light_shadowsharpness = 0.2;

// Mouvement
time += 0.035*60/max(fps,1) if time&gt;=pi*2 time=0;
l  = sin(time)*22;
d += 0.4*60/max(fps,1) if d&gt;=360 d=0;

x = xstart + lengthdir_x(l,d);
y = ystart + lengthdir_y(l,d);
} break;

case 8: // Projecteur blanchâtre
{
sl_light_texture         = spr_light02;
sl_light_xscale          = 4;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = make_color_rgb(255,245,176);
sl_light_power           = 0.7 + random(0.1);
sl_light_ambientpower    = 0.15;
sl_light_shadowlength    = 2;
sl_light_shadowfactor    = 1.025;
sl_light_shadowsharpness = 0.27;

// Rotation du projecteur
if sl_light_angle&gt;60 increment=-0.08 else if sl_light_angle&lt;30 increment=0.08;
if fps!=0 sl_light_angle+=increment*(60/fps);
} break;

case 9: // Feu
{
sl_light_x               = x - 0.8 + random(1.6);
sl_light_y               = y - 0.8 + random(1.6);
sl_light_xscale          = 2;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = make_color_rgb(245+random(10),90+random(5),random(5));
sl_light_power           = 0.17 + (0.63+random(0.2)) * (-global.sl_ambient_light+1);
sl_light_ambientpower    = 0.2;
sl_light_shadowlength    = 3;
sl_light_shadowfactor    = 1.032;
sl_light_shadowsharpness = 0.1;
} break;

case 10: // Gyrophare rouge
{
sl_light_texture         = spr_light03;
sl_light_xscale          = 3.5;
sl_light_yscale          = sl_light_xscale;
sl_light_power           = 1;
sl_light_shadowlength    = 3;
sl_light_shadowfactor    = 1.032;
sl_light_shadowsharpness = 0.2;

// Rotation de la lumière
if fps!=0 sl_light_angle+=1.7*(60/fps);
if sl_light_angle&gt;=360 sl_light_angle=0;

if view_yview[0]+view_hview[0]&lt;y sl_light_active=false else sl_light_active=true;
} break;

case 11: // Lumière blanche 2
{
sl_light_texture         = spr_light02;
sl_light_xscale          = 3.45;
sl_light_yscale          = sl_light_xscale;
sl_light_angle           = 270;
sl_light_color           = c_white;
sl_light_power           = 1;
sl_light_ambientpower    = 0.2;
sl_light_shadowlength    = 3;
sl_light_shadowfactor    = 1.02;
sl_light_shadowsharpness = 0.2;
} break;

case 12: // Gyrophare jaune/orangé
{
sl_light_texture         = spr_light03;
sl_light_xscale          = 2.6;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = make_color_rgb(255,172,0);
sl_light_power           = 0.73;
sl_light_shadowlength    = 3;
sl_light_shadowfactor    = 1.05;
sl_light_shadowsharpness = 0.23;

// Rotation de la lumière
if fps!=0 sl_light_angle+=1.92*(60/fps);
if sl_light_angle&gt;=360 sl_light_angle=0;
} break;

case 13: // Lumière rouge fixe 1
{
sl_light_shadowlength = 4;
sl_light_refresh      = false;
} break;

case 14: // Lumière rouge fixe 2
{
sl_light_xscale          = 1.86;
sl_light_yscale          = sl_light_xscale;
sl_light_power           = 0.8;
sl_light_refresh         = false;
} break;

case 15: // Lumière blanche fixe
{
sl_light_xscale          = 5.26;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = c_white;
sl_light_power           = 0.7;//0.7
sl_light_ambientpower    = 0.5;//0.3
sl_light_shadowlength    = 2;//2
sl_light_shadowfactor    = 1.025;
sl_light_shadowsharpness = 0.9;//0.22
if obj_zombie.lowgpu2 = 0 {
sl_light_refresh         = true;//grosse conso avec true
}else {
sl_light_refresh         = false;//grosse conso avec true
}
} break;

case 16: // Lumière mouvante orange
{
sl_light_power           = 0.65 + random(0.3);
sl_light_shadowlength    = 3;
sl_light_shadowfactor    = 1.045;
sl_light_shadowsharpness = 0.45;

if fps!=0 path_speed=2*(60/fps);
} break;

case 17: // Lumière blanc/bleu fixe
{
sl_light_xscale          = 2.92;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = make_color_rgb(210,245,255);
sl_light_power           = 0.5;
sl_light_ambientpower    = 0.25;
sl_light_shadowlength    = 2;
sl_light_shadowfactor    = 1.025;
sl_light_shadowsharpness = 0.15;
sl_light_refresh         = false;
} break;

case 18: // Phare de véhicule
{
if global.sl_ambient_light &lt; 0.5
{
sl_light_active          = true;
sl_light_texture         = spr_light05;
sl_light_xscale          = 3.2;
sl_light_yscale          = sl_light_xscale;
sl_light_color           = make_color_rgb(255,245,220);
sl_light_power           = 0.7;
sl_light_ambientpower    = 0.15;
sl_light_shadowlength    = 2;
sl_light_shadowfactor    = 1.025;
sl_light_shadowsharpness = 0.17;
}
else sl_light_active     = false;
} break;

case 19: // Lumière jaune fixe
{
sl_light_power           = 0.9;
sl_light_ambientpower    = 0.05;
sl_light_color           = c_yellow;
sl_light_shadowsharpness = 0.18;
sl_light_shadowfactor    = 1.02;
sl_light_xscale          = 2.66;
sl_light_yscale          = sl_light_xscale;
sl_light_refresh         = false;
} break;

case 20: // Lumière blanche fixe
{
sl_light_power           = 0.88;
sl_light_ambientpower    = 0.1;
sl_light_color           = c_white;
sl_light_shadowsharpness = 0.1;
sl_light_shadowfactor    = 1.02;
sl_light_xscale          = 3.2;
sl_light_yscale          = sl_light_xscale;
sl_light_shadowlength    = 2;
sl_light_refresh         = false;
} break;

case 21: // Lumière verdâtre fixe
{
sl_light_power           = 1;
sl_light_ambientpower    = 0.1;
sl_light_color           = make_color_rgb(230,255,150);
sl_light_shadowsharpness = 0.14;
sl_light_shadowfactor    = 1.02;
sl_light_xscale          = 3;
sl_light_yscale          = sl_light_xscale;
sl_light_shadowlength    = 3;
sl_light_refresh         = false;
} break;

case 22: // Lumière bleutée fixe
{
sl_light_power           = 0.8;
sl_light_ambientpower    = 0;
sl_light_color           = make_color_rgb(190,190,255);
sl_light_shadowsharpness = 0.15;
sl_light_shadowfactor    = 1.02;
sl_light_xscale          = 3;
sl_light_yscale          = sl_light_xscale;
sl_light_refresh         = false;
} break;

case 23: // feu
{
sl_light_texture = spr_light01;  // Index de la texture de lumière
sl_light_xscale  = 2.66;         // Facteurs d'étirement de la lumière
sl_light_yscale  = 2.66;
sl_light_color   = c_red;        // Couleur de la lumière
sl_light_shadowsharpness = 0.22; // Facteur de dureté des ombres
if obj_zombie.lowgpu2 = 0 {
sl_light_refresh         = true;//grosse conso avec true
}else {
sl_light_refresh         = false;//grosse conso avec true
}
} break;

case 24: // Lumière mouvante blanche
{
sl_light_xscale          = 2.2;
sl_light_yscale          = 2.2;
sl_light_color           = c_white;
sl_light_power           = 0.8;
sl_light_shadowsharpness = 0.33;

if fps!=0 path_speed=2*(60/fps);
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
