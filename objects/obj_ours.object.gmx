<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ours</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>999996</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle =  point_direction(x,y,obj_zombie.x,obj_zombie.y)


/// create the path
path = path_add();
patrol = 0


//stat du mobs
tirdeloin = 0
distance = 0
enemyspeed = 7.5
stopexp = 0
hpmobs = 50
tir = 0
rechargementson = 0
image_speed = 0.07;

/// blood system

partblood_sys = part_system_create();

//blood particle
partblood = part_type_create();
part_type_shape(partblood,pt_shape_disk);
part_type_size(partblood,0.20,0.20,-0.01,0);
part_type_color1(partblood,250);
part_type_alpha2(partblood,1,1);
part_type_speed(partblood,1,2,0,0);
part_type_direction(partblood,0,259,0,0);
part_type_gravity(partblood,0.3,270);
part_type_blend(partblood,1);
part_type_life(partblood,15,30);

//create emitter
partblood_emit = part_emitter_create(partblood_sys);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///strop tir de loin
tirdeloin = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///system de collision


if (!place_free(x+hspeed,y))
{
    if (hspeed&lt;=0){move_contact_solid(180,abs(hspeed));}
    if (hspeed&gt;0){move_contact_solid(0,abs(hspeed));}
    hspeed=0;
}
  
if (!place_free(x,y+vspeed))
{
    if (vspeed&lt;=0){move_contact_solid(90,abs(vspeed));}
    if (vspeed&gt;0){move_contact_solid(270,abs(vspeed));}
    vspeed=0;
}

if (!place_free(x+hspeed,y+vspeed))
{
    hspeed=0;
}



/*
// Check for Horizontal Solids
if(!place_meeting(x+hspeed,y,obj_wall) == false){
  if(hspeed &lt;= 0){
    move_contact_all(180,abs(hspeed));
     
  }
  if(hspeed &gt; 0){
    move_contact_all(0,abs(hspeed));
    move_towards_point( x+120, y, 2 );
  }
  hspeed = 0;
}


// Check of Vertical Solids
if(!place_meeting(x,y+vspeed,obj_wall) == false){
  if(vspeed &lt;= 0){
    move_contact_all(90,abs(vspeed));
  }
  if(vspeed &gt; 0){
    move_contact_all(270,abs(vspeed));
    
  }
  vspeed = 0;
  
}


// Check for Horizontal + Vertical Solids
if (!place_meeting(x+hspeed,y+vspeed,obj_wall) == false){
    hspeed = 0;
}



/*
if !place_empty (x-20,y) {
motion_set(choose(15,90), enemyspeed/2)
image_angle = direction
patrol = 0
}

if !place_empty (x+20,y) {
motion_set(choose(180,225), enemyspeed/2)
image_angle = direction
patrol = 0
}

if !place_empty (x,y+20) {
motion_set(choose(90,135), enemyspeed/2)
image_angle = direction
patrol = 0
}

if !place_empty (x,y-20) {
motion_set(choose(360,315), enemyspeed/2)
image_angle = direction
patrol = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
alarm[2] = 5500

obj_zombie.EXP += 10
stopexp = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///degat du loup au cac

obj_zombie.hp -= irandom_range(obj_zombie.minarmure,obj_zombie.maxarmure)/obj_zombie.duraarmure*3.5
part_emitter_region(partblood_sys,partblood_emit,obj_zombie.x,obj_zombie.x,obj_zombie.y,obj_zombie.y,1,1);
part_emitter_burst(partblood_sys,partblood_emit,partblood,20);
if obj_zombie.duraarmure &gt; 1 {
obj_zombie.duraarmure -= 0.03
}

// Amount of blood
var count = random_range(4, 32);

// Left-mouse click

   // for (var i = 0; i &lt; count; i++) {
        // Spawn blood within an 8x8 square around the mouse cursor
        instance_create(obj_zombie.x , obj_zombie.y , oBlood);
    //}
    
    // Screenshake
    alarm[0] = 4;
    shake    = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tentative de chase a ameliorer !!!





patrol = 1
motion_set(choose(random(360), random(360),random(360), random(360),random(360), random(360),random(360), random(360),random(360), random(360),random(360), random(360),random(360), random(360),random(360) ,360 ), enemyspeed/1.5)

image_angle = direction





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  
    
        player_x = obj_zombie.x;
player_y = obj_zombie.y;


if (point_distance(x, y, player_x, player_y) &lt; 120) 

{
//degat direct !


///degat du loup au cac

obj_zombie.hp -= irandom_range(obj_zombie.minarmure,obj_zombie.maxarmure)/obj_zombie.duraarmure /15
part_emitter_region(partblood_sys,partblood_emit,obj_zombie.x,obj_zombie.x,obj_zombie.y,obj_zombie.y,1,1);
part_emitter_burst(partblood_sys,partblood_emit,partblood,20);
if obj_zombie.duraarmure &gt; 1 {
obj_zombie.duraarmure -= 0.002
}

// Amount of blood
var count = random_range(4, 32);

// Left-mouse click

   // for (var i = 0; i &lt; count; i++) {
        // Spawn blood within an 8x8 square around the mouse cursor
        instance_create(obj_zombie.x + random_range(-8, 8), obj_zombie.y + random_range(-8, 8), oBlood);
    //}
    
    // Screenshake
    alarm[0] = 4;
    shake    = true;
instance_create (x,y,obj_oursstop)
instance_destroy ()

}


// Limitation des mouvements aux extrémités de la room
if x&gt;room_width x=room_width; if x&lt;0 x=0; if y&gt;room_height y=room_height; if y&lt;0 y=0;


/// chase 


    if alarm[1]=-1 {
    alarm[1] = 150
    
}

if patrol = 1 {
alarm[5] = 1
}



        // stoper mouvement a la mort
    



/// create the path and move to player

if hpmobs &lt; 1 {
instance_create(x,y,obj_repopours)
instance_destroy()
}



if  not (point_distance(x, y, player_x, player_y) &gt; 350) { }

 if (point_distance(x, y, player_x, player_y) &lt; 550)  &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_wall,1,1)) 
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_wall,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tankneige,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house1,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house2,1,1))
  &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house3,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_buisson1,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rocher1,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tronc,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_shape03,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_shape05,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_shape06,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_crate0,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_crate02,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_crate03,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicle,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house2,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade1,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade2,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade3,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade4,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade5,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade6,1,1))
 &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_barricade7,1,1))
  &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_avion,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house8,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house9,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house10,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house11,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house12,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house13,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_house14,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_eglise,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tente,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tente2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tente3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tente4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_houseburn,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridge,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridge2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridge3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridge4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridge5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bridgebroke,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_etageafoin,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_housebroke,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_ascensseur,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_comptoir,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_comptoir2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bibliotheque,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bibliotheque2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bibliotheque3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_cuisiniere,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_cuisiniere2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chaise,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chaise2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chaise3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chaisetomber,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_cercueil,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_bureau,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tabletorture,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_torture,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_torture2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_statue,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tablepoisson,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tableforgeron,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vaisselle,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tablefruit,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_etagere,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_four,1,1)
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_four2,1,1)))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table8,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table9,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tablejeu,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table10,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_table11,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_etagerevin,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_burreau,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_crucifier,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_crucifier2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tenteneige1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_tenteneige2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_brouette,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_machineculture,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debaras8,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rock1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rock2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rock3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rock4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rock5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockblue7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_rockwhite7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest01,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest02,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest03,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest04,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest05,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_chest06,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_wall2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_wall3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_wall4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debris1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_debris2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_spike1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_spike2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_spike3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_train1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_train2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_train3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_train4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_train5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_avion2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_avion3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_avion4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_avion5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_turret1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_turret2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule1,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule2,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule3,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule4,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule5,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule6,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule7,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule8,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule9,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule10,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule11,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule12,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule13,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule14,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule15,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule16,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule17,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule18,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule19,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule20,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule21,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule23,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule24,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule25,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule26,1,1))
   &amp;&amp; (not collision_line(x,y,obj_zombie.x,obj_zombie.y,obj_vehicule27,1,1))
 {

var mx = (obj_zombie.x div 32)*32+16;
var my = (obj_zombie.y div 32)*32+16;

if (mp_grid_path(global.grid, path, x, y, mx, my ,2)) {

if hpmobs &gt; 0 {

 patrol = 0
image_angle =  point_direction(x,y,obj_zombie.x,obj_zombie.y)

//if  (point_distance(x, y, player_x, player_y) &lt; 150) { } else {
    path_start(path, enemyspeed, path_action_stop, true);
    }
    }
    
    
    }
    
    //}
    
    
        //tir de loin
    
    if tirdeloin = 1 {
    
    var mx = (obj_zombie.x div 32)*32+16;
var my = (obj_zombie.y div 32)*32+16;

if (mp_grid_path(global.grid, path, x, y, mx, my ,2)) {


if hpmobs &gt; 0 {
if obj_zombie.hp &gt; 0 {//test pour enemi rode apres mort du joueur
 patrol = 0
image_angle =  point_direction(x,y,obj_zombie.x,obj_zombie.y)

//if  (point_distance(x, y, player_x, player_y) &lt; 150) { } else {
    path_start(path, enemyspeed, path_action_stop, true);
    
    }
    }
    }
    }

    
    // shoot et experience
    
    if hpmobs &lt; 0 
{
alarm[0] = 50
enemyspeed = 0;
}


if stopexp = 0 {
if hpmobs &lt; 0 {

alarm[3] = 1

}
}

clicdroit = 1

// tir par rapport a la distance

 if (point_distance(x, y, player_x, player_y) &lt; 550) &amp;&amp; alarm[0] &lt; 1  &amp;&amp; tir = 0 {
    alarm[0] = 50
    tir = 1
    }
    
    if (point_distance(x, y, player_x, player_y) &gt; 550)  {
    tir = 0
    }
    
    
    /*
    //rajout collision et rajout mask pour eviter bug ia quand zombie contre mur
    
if (!place_free(x+hspeed,y))
{
    if (hspeed&lt;=0){move_contact_solid(180,abs(hspeed));}
    if (hspeed&gt;0){move_contact_solid(0,abs(hspeed));}
    hspeed=0;
}
  
if (!place_free(x,y+vspeed))
{
    if (vspeed&lt;=0){move_contact_solid(90,abs(vspeed));}
    if (vspeed&gt;0){move_contact_solid(270,abs(vspeed));}
    vspeed=0;
}

if (!place_free(x+hspeed,y+vspeed))
{
    hspeed=0;
}
*/

//SUPER I A COLLISION PATROL
if patrol = 1 {
if not place_free(x+15, y) {
move_towards_point(x-15,y,1.5)
}
if not place_free(x-15, y) {
move_towards_point(x+15,y,1.5)
}
if not place_free(x, y+15) {
move_towards_point(x,y-15,1.5)
}
if not place_free(x, y-15) {
move_towards_point(x,y+15,1.5)
}



image_angle = direction
} else {

image_angle =  point_direction(x,y,obj_zombie.x,obj_zombie.y)

}
/* randomize()

global.solidia = irandom_range(1, 360);

move_outside_solid(global.solidia,100)
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_zombie">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

///mort par couteau
clicdroit = 0

if alarm[2] &gt; 0
{

} else {
if hpmobs &lt; 0 {

alarm[2] = 5000
}
 }
 







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dégat cac du loup
if obj_zombie.hp &gt; 0 &amp;&amp; not alarm[2] &gt; 0{



alarm[2] = 8
/*
part_emitter_region(partblood_sys,partblood_emit,x+50,x-50,y+50,y-50,1,1);
part_emitter_burst(partblood_sys,partblood_emit,partblood,20);
*/
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_onde">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tir de loin

tirdeloin = 1
alarm[6] = 1000
/*
if hpmobs &lt; 0 {


alarm[2] = 1000
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hpmobs &gt; 0
{ hpmobs -= irandom_range(20,30)

part_emitter_region(partblood_sys,partblood_emit,x,x,y,y,1,1);
part_emitter_burst(partblood_sys,partblood_emit,partblood,20);
}



// Amount of blood
var count = random_range(4, 32);

// Left-mouse click

      //  for (var i = 0; i &lt; count; i++) {
        // Spawn blood within an 8x8 square around the mouse cursor
        instance_create(x , y , oBlood);
  //   }
    
    // Screenshake
    //alarm[0] = 4;
    shake    = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flammeuseless">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tir de loin

tirdeloin = 1
alarm[6] = 1000
/*
if hpmobs &lt; 0 {


alarm[2] = 1000
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hpmobs &gt; 0
{ hpmobs -= irandom_range(15,20)

part_emitter_region(partblood_sys,partblood_emit,x,x,y,y,1,1);
part_emitter_burst(partblood_sys,partblood_emit,partblood,20);
}



// Amount of blood
var count = random_range(4, 32);

// Left-mouse click

      //  for (var i = 0; i &lt; count; i++) {
        // Spawn blood within an 8x8 square around the mouse cursor
        instance_create(x , y , oBlood);
  //   }
    
    // Screenshake
    //alarm[0] = 4;
    shake    = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_buble">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tir de loin

tirdeloin = 1
alarm[6] = 1000
/*
if hpmobs &lt; 0 {


alarm[2] = 1000
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hpmobs &gt; 0
{ hpmobs -= irandom_range(10,15)

part_emitter_region(partblood_sys,partblood_emit,x,x,y,y,1,1);
part_emitter_burst(partblood_sys,partblood_emit,partblood,20);
}



// Amount of blood
var count = random_range(4, 32);

// Left-mouse click

      //  for (var i = 0; i &lt; count; i++) {
        // Spawn blood within an 8x8 square around the mouse cursor
        
       
        instance_create(x , y , oBlood);
  //   }
    
    // Screenshake
    //alarm[0] = 4;
    shake    = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_laser">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tir de loin

tirdeloin = 1
alarm[6] = 1000
/*
if hpmobs &lt; 0 {


alarm[2] = 1000
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///degat de la balle - dura arme * max dmg ,min dmg

if hpmobs &gt; 0
{ hpmobs -= irandom_range(obj_zombie.mindmg * obj_zombie.minarme,obj_zombie.maxdmg * obj_zombie.maxarme) / 3 * (global.duraarme/2)

part_emitter_region(partblood_sys,partblood_emit,x,x,y,y,1,1);
part_emitter_burst(partblood_sys,partblood_emit,partblood,20);
}



// Amount of blood
var count = random_range(4, 32);

// Left-mouse click

      //  for (var i = 0; i &lt; count; i++) {
        // Spawn blood within an 8x8 square around the mouse cursor
        instance_create(x , y , oBlood);
  //   }
    
    // Screenshake
    //alarm[0] = 4;
    shake    = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bulletassaut">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tir de loin

tirdeloin = 1
alarm[6] = 1000
/*
if hpmobs &lt; 0 {


alarm[2] = 1000
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hpmobs &gt; 0
{ hpmobs -= irandom_range(obj_zombie.mindmg * obj_zombie.minarme,obj_zombie.maxdmg * obj_zombie.maxarme) / 5 * (global.duraarme3/2)

part_emitter_region(partblood_sys,partblood_emit,x,x,y,y,1,1);
part_emitter_burst(partblood_sys,partblood_emit,partblood,20);
}



// Amount of blood
var count = random_range(4, 32);

// Left-mouse click

    //  for (var i = 0; i &lt; count; i++) {
        // Spawn blood within an 8x8 square around the mouse cursor
        instance_create(x , y , oBlood);
  //   }
    
    // Screenshake
    alarm[0] = 4;
    shake    = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>-9,32</point>
    <point>176,32</point>
    <point>176,96</point>
    <point>-9,96</point>
  </PhysicsShapePoints>
</object>
