<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ft_main);
audio_recorder = 0;
// Lets the user choose a recording device.
var count = audio_get_recorder_count();
switch(count)
{
case 0:
    show_message("You have no recording devices!");
    //game_end();
    break;
case 1:
    audio_recorder = 0;
    break;
default:
    audio_recorder = get_integer("You have " + string(count) + " recording devices. Enter index (0-" + string(count - 1) + "):", 0);
    break;
}
playing = false;
recording = false;
audio_recorder_channel = -1;

//audio_buff = buffer_create(256, buffer_grow, 1);
//format = map[? "data_format"];
//rate = map[? "sample_rate"];
//channels = map[? "channels"];
//audio_queue = audio_create_play_queue(format, rate, channels);
queue_len = 0;
/*
// Creates a string with some information associated with the recording.
var map = audio_get_recorder_info(audio_recorder);
var device = string(audio_recorder);
var name = ":#Name: " + map[? "name"];
var str_rate = "#Sample rate: " + string(map[? "sample_rate"]);

info = "##Using recorder device " + device + name + str_rate;

playing = false;
recording = false;
audio_recorder_channel = -1;

audio_buff = buffer_create(256, buffer_grow, 1);
format = map[? "data_format"];
rate = map[? "sample_rate"];
channels = map[? "channels"];
audio_queue = audio_create_play_queue(format, rate, channels);
queue_len = 0;

ds_map_destroy(map);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_escape))
{
//game_end();
}

record = keyboard_check(vk_alt);
play = keyboard_check_pressed(vk_shift);

if (play &amp;&amp; queue_len &gt; 0)
{
if (!recording &amp;&amp; !playing)
    {
    audio_play_sound(audio_queue, 10, false);
    playing = true;
    }
}
else
{
if (record &amp;&amp; !recording &amp;&amp; !playing)
    {
    if queue_len &lt;= 0
        {
        audio_free_play_queue(audio_queue);
        buffer_delete(audio_buff);
        audio_queue = audio_create_play_queue(format, rate, channels);
        audio_buff = buffer_create(256, buffer_grow, 1);
        audio_recorder_channel = audio_start_recording(audio_recorder);
        recording = true;
        playing = false;
        queue_len = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if --queue_len &lt;= 0
{
playing = false;
show_message("Queue playback ended!");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var channel = async_load[? "channel_index"];

if (audio_recorder_channel == channel)
{
var t_buff =  async_load[? "buffer_id"];
var length = async_load[? "data_len"];
buffer_seek(audio_buff, buffer_seek_end, 0);
var pos = buffer_tell(audio_buff);
buffer_copy(t_buff, 0, length, audio_buff, pos);
audio_queue_sound(audio_queue, audio_buff, pos, length);
++queue_len;
if (!record)
    {
    audio_stop_recording(audio_recorder_channel);
    recording = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//var s = info + "##Recording: " + string(recording) + "##&lt;Alt&gt; to record.#&lt;Shift&gt; to play back.";

//draw_text(10, 10, s);
//draw_text(10, 180, "Queue Length: " + string(queue_len));
//draw_text(10, 200, "Buffer size: " + string(buffer_get_size(audio_buff)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
