<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Aura_Torch</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Aura_Light_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Here we are creating a torch light. You can create lights of different 
// sizes and shapes as long as the radius initialised before in large 
// enough to fit the sprite rotated around it's origin. This is slightly 
// wasteful of memory, but fsater to process than creating smaller surfaces
// and rotating them at the correct position through maths.

// This light is flagged as NOT being static so it is updated every step...

Aura_Light_Init(sprite_width, merge_colour(c_white, c_yellow, 0.5), 1, false);


// The stuff below is for the DEMO only and can be removed

with(obj_Aura_Point_Light) aura_light_static = true;
with(obj_Aura_ShadowCaster_Parent) speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Here we update the "player" with the torch. DEMO only and can be removed.

var ang = point_direction(x, y, mouse_x, mouse_y);
var dif = angle_difference(ang, image_angle);
image_angle += median(-5, dif, 5);

// Note! Changing the image_angle of the instance changes how the light is drawn too!
// You can also set the image xscale or yscale to get different effects, but to make 
// it visible the light needs to be updated afterwards or not be static. The scaled 
// sprite cannot be larger than the radius used to initialise it.

view_xview[0] = floor(clamp(x - (view_wview[0] / 2), 0, room_width - view_wview[0]));
view_yview[0] = floor(clamp(y - (view_hview[0] / 2), 0, room_height - view_hview[0]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,96</point>
    <point>96,96</point>
  </PhysicsShapePoints>
</object>
