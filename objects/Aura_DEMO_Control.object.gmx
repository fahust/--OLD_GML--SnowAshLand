<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This object is imply a controller for the dmeo rooms 
// and can be removed without any issues.

//The following is just for the demo:
static = 0;
updating = 0;
enabled = 0;
click_time = 0;

draw_set_font(font0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check mouse click/release or mouse click/hold for moving the view
// or the player torch, or for creating new lights.

if mouse_check_button_pressed(mb_left)
{
click_time = 0;
}

if mouse_check_button(mb_left)
{
++click_time;
//switch(room)
    //{
    //case rm_Aura_Demo:
        with (obj_Aura_Torch_Light)
            {
            var pd = point_direction(x, y, mouse_x, mouse_y);
            repeat(4)
                {
                if !collision_circle(x + lengthdir_x(1, pd), y + lengthdir_y(1, pd), 4, obj_Aura_ShadowCaster_Parent, true, true)
                    {
                    x += lengthdir_x(1, pd);
                    y += lengthdir_y(1, pd);
                    }
                }
            }
       // break;
    //default:
        if click_time &gt; 14
            {
            motion_set(point_direction(x, y, mouse_x, mouse_y),  point_distance(x, y, mouse_x, mouse_y) / 10);
            view_xview[0] = floor(clamp(x - (view_wview[0] / 2), 0, room_width - view_wview[0]));
            view_yview[0] = floor(clamp(y - (view_hview[0] / 2), 0, room_height - view_hview[0]));
            }
    //}
}

if mouse_check_button_released(mb_left)
{
speed = 0;
if click_time &lt; 15
    {
    //switch (room)
        //{
        //case rm_Aura_Dynamic:
         instance_create(mouse_x, mouse_y, obj_Aura_Point_Light); //break;
        //case rm_Aura_Static:
         with(instance_create(mouse_x, mouse_y, obj_Aura_Point_Light)) aura_light_static = true; //break;
        //}
    }
}

if mouse_check_button_pressed(mb_right)
{
instance_create(mouse_x, mouse_y, obj_Aura_Fast_Light);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw DEMO Text

// This can all be rmeoved as all we are doing is drawing some text for the demo.

draw_text_colour(32, 8, "FPS_Real:", c_white, c_white, c_white, c_white, 1);
draw_text_colour(32, 32, "Light Number:", c_white, c_white, c_white, c_white, 1);
draw_text_colour(32, 48, "Lights active:", c_white, c_white, c_white, c_white, 1);
draw_text_colour(32, 64, "Lights enabled:", c_white, c_white, c_white, c_white, 1);
draw_text_colour(32, 80, "Lights static:", c_white, c_white, c_white, c_white, 1);

draw_text_colour(200, 8, string(fps_real), c_white, c_white, c_white, c_white, 1);
draw_text_colour(200, 32, string(instance_number(obj_Aura_Light_Parent)), c_white, c_white, c_white, c_white, 1);
draw_text_colour(200, 48, string(updating), c_white, c_white, c_white, c_white, 1);
draw_text_colour(200, 64, string(enabled), c_white, c_white, c_white, c_white, 1);
draw_text_colour(200, 80, string(static), c_white, c_white, c_white, c_white, 1);

draw_text_colour(32, display_get_gui_height() - 64, "Press &lt;BACKSPACE&gt; or the Back button to change rooms", c_white, c_white, c_white, c_white, 1);
switch(room)
{
case rm_Aura_Demo:
    draw_text_colour(32, display_get_gui_height() - 48, "Click and hold to move the player torch.", c_white, c_white, c_white, c_white, 1);
    break;
default:
    draw_text_colour(32, display_get_gui_height() - 48, "Click to place a light, click and drag the mouse to move the view.", c_white, c_white, c_white, c_white, 1);
}
draw_text_colour(32, display_get_gui_height() - 32, "Right click to create a random fast light", c_white, c_white, c_white, c_white, 1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Prepeare the DEMO variables (this can be removed)

static = 0;
updating = 0;
enabled = 0;

with (obj_Aura_Light_Parent)
{
if (aura_light_static) ++other.static;
if (aura_light_update) ++other.updating;
if (aura_light_enabled) ++other.enabled;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEMO ONLY

switch(room)
{
case rm_Aura_Dynamic: room_goto(rm_Aura_Static); break;
case rm_Aura_Static: room_goto(rm_Aura_Demo); break;
case rm_Aura_Demo: room_goto(rm_Aura_Dynamic); break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
