<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-16000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*moteur2 = 0
jourtombe = 1
drawgo = 0
newtorch = 0
ambient_light = 0
alpharoom = 1
/*
ambient_light = 0.1;

light_surface = surface_create(room_width,room_height);

application_surface_draw_enable(false);

uniform_ambient = shader_get_uniform(shd_multiply, "u_fambient");
sample_light = shader_get_sampler_index(shd_multiply, "u_slight");
*/





/*shaders shd_multiply { vertex {

//
// Simple passthrough vertex shader
//
attribute vec3 in_Position;                  // (x,y,z)
//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.
attribute vec4 in_Colour;                    // (r,g,b,a)
attribute vec2 in_TextureCoord;              // (u,v)

varying vec2 v_vTexcoord;
varying vec4 v_vColour;

void main()
{
    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);
    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;
    
    v_vColour = in_Colour;
    v_vTexcoord = in_TextureCoord;
}






{fragment

//
// Simple passthrough fragment shader
//
varying vec2 v_vTexcoord;
varying vec4 v_vColour;
uniform sampler2D u_slight;
uniform float u_fambient;


void main()
{
    gl_FragColor = (u_fambient + texture2D(u_slight, v_vTexcoord)) * texture2D( gm_BaseTexture, v_vTexcoord );
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if global.sl_time &gt;= 18 &amp;&amp; global.sl_time &lt;= 24 {
if ambient_light &gt;= 0.05 {
ambient_light -= 0.00002
}
}

if global.sl_time &gt;= 4 &amp;&amp; global.sl_time &lt;= 10 {
if ambient_light &lt;= 1 {
ambient_light += 0.00002
}
}


alarm[4] = 1


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
global.sl_time += 0.0001

if global.sl_time &lt;= 24 {

}


if global.sl_time &gt;= 24 {
global.sl_time = 0


}

drawgo = 1

/*
sl_timespeed = (1/20)/(room_speed/3); // Vitesse d'avancement de l'heure
sl_ambientshadows_alpha = -global.sl_ambient_light+1.77; // Modification de l'alpha des ombres ambiantes en fonction de la luminosité ambiante
*/


alarm[3] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

if obj_zombie.lowgpu = 1 {
if ambient_light &gt; 0.0 
{
ambient_light -= 0.01
alarm[2] = 10
jourtombe = 0

}
else if ambient_light &lt;= 0
{
jourtombe = 1
daysurvive +=1
ini_open("savefile.ini")
    ini_write_real("player","daysurvive",daysurvive);
    ini_close();
//durée du jour
alarm[1] = 7000;

}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*




if obj_zombie.lowgpu = 1 {
if ambient_light &lt; 0.95 
{
ambient_light += 0.01
alarm[1] = 5
jourtombe = 1

}
else if ambient_light &gt;=0.95
{
jourtombe = 0
//durée de la nuit noir
alarm[2] = 5000;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*moteur2 = 1
ambient_light=1











if global.sl_time &lt;= 24 &amp;&amp; global.sl_time &gt;= 23 {
ambient_light = 0.05
}

if global.sl_time &lt;= 23 &amp;&amp; global.sl_time &gt;= 22 {
ambient_light = 0.05
}

if global.sl_time &lt;= 22 &amp;&amp; global.sl_time &gt;= 21 {
ambient_light = 0.30
}

if global.sl_time &lt;= 21 &amp;&amp; global.sl_time &gt;= 20 {
ambient_light = 0.50
}

if global.sl_time &lt;= 20 &amp;&amp; global.sl_time &gt;= 19 {
ambient_light = 0.70
}

if global.sl_time &lt;= 19 &amp;&amp; global.sl_time &gt;= 18 {
ambient_light = 0.90
}

if global.sl_time &lt;= 17 &amp;&amp; global.sl_time &gt;= 16 {
ambient_light = 1
}

if global.sl_time &lt;= 16 &amp;&amp; global.sl_time &gt;= 15 {
ambient_light = 1
}

if global.sl_time &lt;= 15 &amp;&amp; global.sl_time &gt;= 14 {
ambient_light = 1
}

if global.sl_time &lt;= 14 &amp;&amp; global.sl_time &gt;= 13 {
ambient_light = 1
}

if global.sl_time &lt;= 13 &amp;&amp; global.sl_time &gt;= 12 {
ambient_light = 1
}

if global.sl_time &lt;= 12 &amp;&amp; global.sl_time &gt;= 11 {
ambient_light = 1
}

if global.sl_time &lt;= 11 &amp;&amp; global.sl_time &gt;= 10 {
ambient_light = 1
}

if global.sl_time &lt;= 10 &amp;&amp; global.sl_time &gt;= 9 {
ambient_light = 1
}


if global.sl_time &lt;= 9 &amp;&amp; global.sl_time &gt;= 8 {
ambient_light = 1
}


if global.sl_time &lt;= 8 &amp;&amp; global.sl_time &gt;= 7 {
ambient_light = 0.85
}


if global.sl_time &lt;= 7 &amp;&amp; global.sl_time &gt;= 6 {
ambient_light = 0.55
}


if global.sl_time &lt;= 6 &amp;&amp; global.sl_time &gt;= 5 {
ambient_light = 0.35
}

if global.sl_time &lt;= 5 &amp;&amp; global.sl_time &gt;= 4 {
ambient_light = 0.15
}

if global.sl_time &lt;= 4 &amp;&amp; global.sl_time &gt;= 3 {
ambient_light = 0.05
}

if global.sl_time &lt;= 3 &amp;&amp; global.sl_time &gt;= 2 {
ambient_light = 0.05
}

if global.sl_time &lt;= 2 &amp;&amp; global.sl_time &gt;= 1 {
ambient_light = 0.05
}

if global.sl_time &lt;= 1 &amp;&amp; global.sl_time &gt;= 0 {
ambient_light = 0.05
}


















//set variables


daysurvive = 0
alpha = 0;
torch = 0
ini_open("savefile.ini")
//ambient_light = ini_read_real ("player","alphanight2",0.1);
daysurvive = ini_read_real ("player","daysurvive",0);
jourtombe = ini_read_real ("player","jourtombe",1);
ini_close();
daylength = 0.1;
nightlenght = 0.1;

if jourtombe = 1 {
alarm[1] = 20;
}

if jourtombe = 0 {
alarm[2] = 20;
}
//pour reactualiser si alt entre
//alarm[0] = 100

alarm[3] = 5
alarm[4] = 5





/*
light_surface = surface_create(view_wview,view_hview);

application_surface_draw_enable(false);

uniform_ambient = shader_get_uniform(shd_multiply, "u_fambient");
sample_light = shader_get_sampler_index(shd_multiply, "u_slight");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*/*
x = obj_zombie.x
y = obj_zombie.y
*/
//surface_reset_target()/*
/*ambient_light = 1/*
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

if global.sl_time &lt;= 24 &amp;&amp; global.sl_time &gt;= 23 {
ambient_light = 0.05
}

if global.sl_time &lt;= 23 &amp;&amp; global.sl_time &gt;= 22 {
ambient_light = 0.05
}

if global.sl_time &lt;= 22 &amp;&amp; global.sl_time &gt;= 21 {
ambient_light = 0.30
}

if global.sl_time &lt;= 21 &amp;&amp; global.sl_time &gt;= 20 {
ambient_light = 0.50
}

if global.sl_time &lt;= 20 &amp;&amp; global.sl_time &gt;= 19 {
ambient_light = 0.70
}

if global.sl_time &lt;= 19 &amp;&amp; global.sl_time &gt;= 18 {
ambient_light = 0.90
}

if global.sl_time &lt;= 17 &amp;&amp; global.sl_time &gt;= 16 {
ambient_light = 1
}

if global.sl_time &lt;= 16 &amp;&amp; global.sl_time &gt;= 15 {
ambient_light = 1
}

if global.sl_time &lt;= 15 &amp;&amp; global.sl_time &gt;= 14 {
ambient_light = 1
}

if global.sl_time &lt;= 14 &amp;&amp; global.sl_time &gt;= 13 {
ambient_light = 1
}

if global.sl_time &lt;= 13 &amp;&amp; global.sl_time &gt;= 12 {
ambient_light = 1
}

if global.sl_time &lt;= 12 &amp;&amp; global.sl_time &gt;= 11 {
ambient_light = 1
}

if global.sl_time &lt;= 11 &amp;&amp; global.sl_time &gt;= 10 {
ambient_light = 1
}

if global.sl_time &lt;= 10 &amp;&amp; global.sl_time &gt;= 9 {
ambient_light = 1
}


if global.sl_time &lt;= 9 &amp;&amp; global.sl_time &gt;= 8 {
ambient_light = 1
}


if global.sl_time &lt;= 8 &amp;&amp; global.sl_time &gt;= 7 {
ambient_light = 0.85
}


if global.sl_time &lt;= 7 &amp;&amp; global.sl_time &gt;= 6 {
ambient_light = 0.55
}


if global.sl_time &lt;= 6 &amp;&amp; global.sl_time &gt;= 5 {
ambient_light = 0.35
}

if global.sl_time &lt;= 5 &amp;&amp; global.sl_time &gt;= 4 {
ambient_light = 0.15
}

if global.sl_time &lt;= 4 &amp;&amp; global.sl_time &gt;= 3 {
ambient_light = 0.05
}

if global.sl_time &lt;= 3 &amp;&amp; global.sl_time &gt;= 2 {
ambient_light = 0.05
}

if global.sl_time &lt;= 2 &amp;&amp; global.sl_time &gt;= 1 {
ambient_light = 0.05
}

if global.sl_time &lt;= 1 &amp;&amp; global.sl_time &gt;= 0 {
ambient_light = 0.05
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if moteur2 = 1 {

shader_set(shd_multiply);
shader_set_uniform_f(uniform_ambient, ambient_light);
texture_set_stage(sample_light,surface_get_texture(light_surface));


draw_surface(application_surface,0,0);

shader_reset();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if drawgo = 1 {

surface_set_target(light_surface);
draw_clear_alpha(c_black, alpharoom)
draw_set_blend_mode(bm_add);

with(obj_light01)
{
// draw_self();
}



if newtorch = 1 {
draw_sprite_ext(spr_light02, 0 ,obj_zombie.x-view_xview,obj_zombie.y-view_yview, 3 ,3 ,point_direction(obj_zombie.x,obj_zombie.y,mouse_x,mouse_y),c_white,alpharoom);
}






draw_set_blend_mode(bm_normal);


surface_reset_target();

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if moteur2 = 1 {
//draw_clear_alpha(c_black,1);

surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if newtorch = 0 {
newtorch = 1} else {
newtorch = 0}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
