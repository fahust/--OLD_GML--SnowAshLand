<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////application_surface_draw_enable(false)

//u_resolution = shader_get_uniform(shader, "irsolution");

//u_resolution = shader_get_uniform(shader, "irsolution");


ambient_light = 0.05
alarm[0] = 10

surf_blur = 0
surf_post_blur = 0
surf_factor = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blur_range=25

/*if (!surface_exists( surf_blur ) )
{
    surf_blur = surface_create( 1366, 768 );
}*/
//application_surface_draw_enable(false);
//uniform_ambient = shader_get_uniform(shader,"u_fAmbient");

//sampler_light = shader_get_uniform(shader,"u_sLight");
//
//surface_set_target(surf_blur);
//draw_clear_alpha(0,0);
//surface_reset_target();



/*uni_blur_range_h=shader_get_uniform(shd_blur_hor, "blur_range");
uni_blur_range_v=shader_get_uniform(shd_blur_ver, "blur_range");

sample_factor_h=shader_get_sampler_index(shd_blur_hor,"surface_factor")
sample_factor_v=shader_get_sampler_index(shd_blur_ver,"surface_factor")

mpx=0
mpy=0

hp=10
game_over=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rand=irandom(60)
//if rand=30{instance_create(1280*0.5,720*0.5,obj_rocket)}
if alarm[0] &lt; 0 {

//surface_set_target(surf_pre_blur)//draw here the original stuff
//draw_clear_alpha(0,0)
//draw_background(back_landscape,0,0)
//if hp&gt;0{draw_sprite(spr_gabranth,0,mouse_x,mouse_y)}
//draw_sprite_ext(spr_jsf,0,1280*0.5,720*0.5,1,1,point_direction(1280*0.5,720*0.5,mouse_x,mouse_y)+90,c_white,1)
//rockets=instance_number(obj_rocket)
/*
if rockets&gt;0
    {
    for (i=0;i&lt;rockets;i++)
        {
        r=instance_find(obj_rocket,i)
        if r.life&gt;0
            {
            draw_sprite_ext(spr_rocket,0,r.x,r.y,1,1,r.direction,c_white,1)
            draw_set_blend_mode(bm_add)
            draw_sprite_ext(spr_rocket,1,r.x,r.y,r.rand,1,r.direction,c_white,1)
            draw_set_blend_mode(bm_normal)
            }
        else
            {
            draw_set_blend_mode(bm_add)
            draw_sprite_ext(spr_explosion,0,r.x,r.y,(r.life)/30,(r.life)/30,r.life*2,c_white,1)
            draw_set_blend_mode(bm_normal)
            }
        }
    }*/
    
//surface_reset_target()
/*
surface_set_target(surf_factor)//draw red things to make stuff blurry you want
//draw_clear_alpha(0,0)
draw_set_blend_mode(bm_add)
//if hp&gt;0{draw_sprite_ext(spr_gabranth,1,mouse_x,mouse_y,1,1,0,c_white,point_distance(mpx,mpy,mouse_x,mouse_y)/10)}
//if mpx!=mouse_x{mpx=mouse_x}if mouse_y!=mpy{mpy=mouse_y}
//draw_sprite_ext(spr_jsf,1,1280*0.5,720*0.5,1,1,point_direction(1280*0.5,720*0.5,mouse_x,mouse_y)+90,c_white,1)
draw_rectangle_colour(0,720-200,1280,720,c_red,c_red,c_red,c_red,0)
/*rockets=instance_number(obj_rocket)
if rockets&gt;0
    {
    for (i=0;i&lt;rockets;i++)
        {
        r=instance_find(obj_rocket,i)
        if r.life&gt;0
            {
            draw_set_blend_mode(bm_add)
            draw_set_blend_mode(bm_add)draw_sprite_ext(spr_rocket,2,r.x,r.y,r.rand,1,r.direction,c_white,1)
            draw_set_blend_mode(bm_normal)
            }            
        else
            {
            draw_set_blend_mode(bm_add)
            draw_sprite_ext(spr_explosion,1,r.x,r.y,(r.life)/7.5,(r.life)/7.5,r.life*2,make_colour_hsv(0,255,255+(r.life*8.5)),1)
            draw_set_blend_mode(bm_normal)
            }
        }
    }*/
    /*
draw_set_blend_mode(bm_normal)
//if hp&lt;1//TOUT LE TEMPS
//{
game_over++
col=make_colour_hsv(0,0,game_over*4)
blur_range++
draw_set_blend_mode(bm_add)
draw_rectangle_colour(0,0,room_width,room_height,col,col,col,col,0)
draw_set_blend_mode(bm_normal)
//game_over=0 blur_range=25
//}
surface_reset_target()
*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(surf_blur){surface_free(surf_blur)}
//if surface_exists(surf_post_blur){surface_free(surf_post_blur)}
//if surface_exists(surf_factor){surface_free(surf_factor)}

if room = Menu {}else{
/*
with(obj_zombie){scr_savegame();}
instance_deactivate_all(true)

with(obj_zombie){
instance_destroy();
}
*/
/*
with(obj_difficulty){
instance_destroy();
}

with(obj_menuechap){
instance_destroy();
}

with(obj_controllerbossnet){
instance_destroy();
}

with(obj_weapon){
instance_destroy();
}

with(obj_crafting){
instance_destroy();
}

with(obj_team){
instance_destroy();
}

with(obj_guilde){
instance_destroy();
}


with(obj_screen){
instance_destroy();
}

with(obj_bigstats){
instance_destroy();
}

with(obj_cursor){
instance_destroy();
}
with(obj_pvp){
instance_destroy();
}
with(obj_bar){
instance_destroy();
}
with(obj_quest){
instance_destroy();
}
with(obj_inventory){
instance_destroy();
}
with(obj_music){
instance_destroy();
}
with(obj_iasarca){
instance_destroy();
}
with(obj_armorloot){
instance_destroy();
}
with(obj_demarageretard){
instance_destroy();
}
with(obj_maladie){
instance_destroy();
}
with(obj_buttonguilde){
instance_destroy();
}
with(obj_controllerpopobjet){
instance_destroy();
}
with(obj_fog){
instance_destroy();
}
with(obj_langue){
instance_destroy();
}
with(obj_audiodetect){
instance_destroy();
}
with(obj_controllertrap){
instance_destroy();
}
with(obj_economie){
instance_destroy();
}
with(obj_forge){
instance_destroy();
}
with(obj_healgun){
instance_destroy();
}
with(obj_forgearmure){
instance_destroy();
}
with(obj_textnetdepth){
instance_destroy();
}
with(obj_note){
instance_destroy();
}
with(obj_cleanmem){
instance_destroy();
}
with(obj_constructreception){
instance_destroy();
}

with(obj_controllerplayer){
instance_destroy();
}
with(obj_nightcycle){
instance_destroy();
}


//reconstruction


instance_create(x,y,obj_difficulty)
instance_create(x,y,obj_menuechap)
instance_create(x,y,obj_controllerbossnet)
instance_create(x,y,obj_weapon)
instance_create(x,y,obj_crafting)
instance_create(x,y,obj_team)
instance_create(x,y,obj_guilde)

instance_create(x,y,obj_screen)

instance_create(x,y,obj_bigstats)
instance_create(x,y,obj_cursor)
instance_create(x,y,obj_pvp)
instance_create(x,y,obj_bar)
instance_create(x,y,obj_quest)
instance_create(x,y,obj_inventory)
instance_create(x,y,obj_music)
instance_create(x,y,obj_iasarca)
instance_create(x,y,obj_armorloot)
instance_create(x,y,obj_demarageretard)
instance_create(x,y,obj_maladie)
instance_create(x,y,obj_buttonguilde)
instance_create(x,y,obj_controllerpopobjet)
instance_create(x,y,obj_fog)
instance_create(x,y,obj_langue)
instance_create(x,y,obj_audiodetect)
instance_create(x,y,obj_controllertrap)
instance_create(x,y,obj_economie)
instance_create(x,y,obj_forge)
instance_create(x,y,obj_healgun)
instance_create(x,y,obj_forgearmure)
instance_create(x,y,obj_textnetdepth)
instance_create(x,y,obj_note)
instance_create(x,y,obj_cleanmem)
instance_create(x,y,obj_constructreception)
instance_create(x,y,obj_nightcycle)

//instance_create(x,y,obj_zombie)
instance_create(x,y,obj_controllerplayer)
*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 10

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*alarm[0] = 100
if alarm[0] &lt; 0 {
if (!surface_exists( surf_blur ) )
{
    surf_blur = surface_create( 1366, 768 );
}

//draw_surface(application_surface,0,0);
//surface_set_target(surf_blur);
//draw_clear_alpha(c_black,1)
//draw_set_blend_mode(bm_add);

shader_set(shd_radial_blur);
//shader_set_uniform_f(uniform_ambient, ambient_light);
//texture_set_stage(sampler_light, surface_get_texture(surf_blur))
    draw_set_blend_mode_ext(bm_dest_alpha,bm_zero);
    if instance_exists(obj_engine){
     //surface_resize(application_surface, view_wport[0],view_hport[0]);
    draw_surface_ext(application_surface,0,0,0.531,0.712,0,c_white,1);//0.52,072

}
draw_set_blend_mode(bm_normal);
//draw_set_blend_mode( bm_add );
//shader_set_uniform_f(,800.0,600.0);

//shader_set_uniform_f(,800.0,600.0);

//draw_rectangle(view_xview,view_yview,view_wview,view_hview,false);
//draw_set_blend_mode( bm_normal ); 
shader_reset();

//surface_copy(surf_blur,0,0,application_surface)

//surface_reset_target();

/*
/*pas mal je crois
surface_set_target(surf_blur)
    shader_set( shader );
    shader_set_uniform_f( 1, 10 );
    draw_surface( surf_blur, 0, 0 );
    shader_reset();
surface_reset_target();
*/



//draw_text(view_xview+300,view_yview+300 ,"EXISTE PUTAIN")
/*}
/*
surface_set_target(surf_post_blur)
//draw_clear_alpha(0,0)
shader_set(shd_blur_ver)
texture_set_stage(sample_factor_v, surface_get_texture(surf_factor))
shader_set_uniform_f(uni_blur_range_v,blur_range);
draw_surface(surf_pre_blur,0,0)
shader_reset()
surface_reset_target()


shader_set(shd_blur_hor)
texture_set_stage(sample_factor_h, surface_get_texture(surf_factor))
shader_set_uniform_f(uni_blur_range_h,blur_range);
draw_surface(surf_post_blur,0,0)
shader_reset()
}
//you can swap shd_blur_ver and shd_blur_hor if you wish.
}
//draw_surface(surf_factor,0,0) 
//use this if you want to debug your red surface
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
