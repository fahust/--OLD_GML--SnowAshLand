<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[4] = 850 *global.varfpsmax//durée de vie

up = 0
alphazone = 0.3

color1 = make_color_rgb(4,76,41)

roomcrea = room

imageanim = 0


colororange = make_color_rgb(255,143,5)
Sname=part_system_create();

particle1=part_type_create()
part_system_depth(Sname,-100000)
part_type_shape(particle1,pt_shape_flare);
//part_type_size(particle1,0.3,0.35,0.05,0);//0.3,0.4,0.1,);
//part_type_speed(particle1,9,19,0.01,0);//,12,35,0.01,0);
part_type_direction(particle1,0,0,0,0);
part_type_orientation(particle1,0,0,0,0,1);
part_type_color3(particle1,0,0,0);//33023,255,65535);
part_type_alpha2(particle1,0.6,0.9);
part_type_scale(particle1,1,1);
part_type_gravity(particle1,0,270);
part_type_life(particle1,8,16);
part_type_blend(particle1,1);/*
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
part_type_destroy(particle1);
part_system_destroy(Sname);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///autodestruction
global.competencefin = 1
instance_destroy()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if roomcrea = room {
visible = true
if point_distance(x, y, obj_zombie.x, obj_zombie.y) &lt; 400 {
if obj_zombie.hp &lt; obj_zombie.maxhp {
obj_zombie.hp += 0.05*(obj_zombie.maxhp/100)
}
}

}else{
visible = false
}







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
part_type_destroy(particle1);
part_system_destroy(Sname);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if roomcrea = room {

if alphazone &gt; 0.1 &amp;&amp; up = 0{
alphazone -= 0.002 }else{
up = 1
if alphazone &lt; 0.4 {
alphazone += 0.002
}else{ up = 0 }
}

imageanim += (0.5/global.varfpsmax)
draw_sprite_ext(spr_healbalise,imageanim,x,y,1.7,1.7,0,c_white,1)

}*/
if roomcrea = room {
image_angle += 4.5

 if instance_exists(obj_engine) {
 if obj_zombie.lowgpu2 = 3 {}else{
 mode = 0

    sprite = spr_light01; // Lumière orange
    scale  = 8;
    angle  = 0;
    color  = c_green;
    alpha  = 0.4;


SL_draw_sprite_light(sprite,0,x,y,scale,scale,angle,color,alpha);
}
}

xvar0 = x+lengthdir_x(1,image_angle)
yvar0 = y+lengthdir_y(1,image_angle)
xvar = x+lengthdir_x(400,image_angle)
yvar = y+lengthdir_y(400,image_angle)
draw_curve(xvar0,yvar0,xvar,yvar,image_angle-25,60)




xvar0 = x+lengthdir_x(1,image_angle+90)
yvar0 = y+lengthdir_y(1,image_angle+90)
xvar = x+lengthdir_x(500,image_angle+90)
yvar = y+lengthdir_y(500,image_angle+90)
draw_curve(xvar0,yvar0,xvar,yvar,image_angle-25+90,60)




xvar0 = x+lengthdir_x(1,image_angle+180)
yvar0 = y+lengthdir_y(1,image_angle+180)
xvar = x+lengthdir_x(500,image_angle+180)
yvar = y+lengthdir_y(500,image_angle+180)
draw_curve(xvar0,yvar0,xvar,yvar,image_angle-25+180,60)




xvar0 = x+lengthdir_x(1,image_angle+270)
yvar0 = y+lengthdir_y(1,image_angle+270)
xvar = x+lengthdir_x(500,image_angle+270)
yvar = y+lengthdir_y(500,image_angle+270)
draw_curve(xvar0,yvar0,xvar,yvar,image_angle-25+270,60)

//
/*
parabolax[0] = x
parabolay[0] = y
vspd2 = 1//+lengthdir_x(5,image_angle)//you might also be asking about getting these values, which I'd need to test out to help
hspd2 = 1//+lengthdir_y(5,image_angle)
grvty2 = 1
timer2 = 1
maxsteps2 = 20
for (timer2 = 1; timer2 &lt;= maxsteps2; timer2++)
    {
    vspd2 += grvty2
    parabolax[timer2] = parabolax[timer2-1] //+hspd2//+lengthdir_x(hspd2,image_angle)
    parabolay[timer2] = parabolay[timer2-1] //+vspd2//+lengthdir_y(vspd2,image_angle)
    }
    
    maxsteps2 = 20

for(i2 = 0; i2 &lt; maxsteps2; i2++)
    {
    draw_line(parabolax[i2]
    ,parabolay[i2]
    ,parabolax[i2+1]
    ,parabolay[i2+1])
    }
    
    
    
    
    */
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
