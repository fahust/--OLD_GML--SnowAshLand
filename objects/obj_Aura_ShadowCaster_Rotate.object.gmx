<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Aura_Rotating_Block</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-110</depth>
  <persistent>0</persistent>
  <parentName>obj_Aura_ShadowCaster_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// In this shadow caster, we are going to rotate the mesh along with the sprite
// This is easily done by first getting the lengths and dircetions to the 
// points that will make up the polygon mesh...

image_xscale = 1 + random(2);
image_yscale = 0.25 + random(0.75);

a_dist[0] = point_distance(0, 0, -(sprite_width / 2), -(sprite_height/ 2));
a_dist[1] = point_distance(0, 0, sprite_width / 2, -(sprite_height/ 2));
a_dist[2] = point_distance(0, 0, sprite_width / 2, sprite_height/ 2);
a_dist[3] = point_distance(0, 0, -(sprite_width / 2), sprite_height/ 2);

a_dir[0] = point_direction(0, 0, -(sprite_width / 2), -(sprite_height/ 2));
a_dir[1] = point_direction(0, 0, sprite_width / 2, -(sprite_height/ 2));
a_dir[2] = point_direction(0, 0, sprite_width / 2, sprite_height/ 2);
a_dir[3] = point_direction(0, 0, -(sprite_width / 2), sprite_height/ 2);

// We now initialise the mesh as we would any other...

Aura_Shadow_Caster_Poly_Init();
for (var i = 0; i &lt; 4; i++)
{
Aura_Shadow_Caster_Poly_Add_Point(lengthdir_x(a_dist[i], a_dir[i] + image_angle), lengthdir_y(a_dist[i], a_dir[i] + image_angle));
}

// The Step Event will replicate this process...

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Rotate the sprite

image_angle++;

// Rotate the shadow mesh using the arrays we initialise din the create event...

var num = aura_shadow_points;

Aura_Shadow_Caster_Poly_Init();
for (var i = 0; i &lt; num; i++)
{
Aura_Shadow_Caster_Poly_Add_Point(lengthdir_x(a_dist[i], a_dir[i] + image_angle), lengthdir_y(a_dist[i], a_dir[i] + image_angle));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
